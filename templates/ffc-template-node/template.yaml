apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: ffc-template-node
  title: "FFC Template Node"
  description: "Template to support rapid delivery of microservices for FFC Platform. It contains the configuration needed to deploy a simple Hapi Node server to the Azure Kubernetes Platform."
  tags:
    - node
    - hapi
    - aks
    - fcp
spec:
  owner: fcp
  type: service

  parameters:
    - title: Component Information
      description: Enter properties describing this component.
      required:
        - component_id
        - description
        - owner
        - component_type
        - component_lifecycle
      properties:
        component_id:
          title: Component Name
          type: string
          description: Unique name of the component which will be used for the repository, package, and image names. This should be in the format <program>-<workstream>-<repo>. Maximum 64 characters.
          ui:field: EntityNamePicker
          ui:autofocus: true

        description:
          title: Description
          type: string
          description: Describe what this component does

        system:
          title: System
          type: string
          description: Select the system that this component will be a part of
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            catalogFilter:
              - kind: System

        component_type:
          title: Component Type
          type: string
          description: Select the type of this component. Allowed values - Service (a backend service or API), Web (a web application), Library (a library or package that can be consumed by other applications)
          default: service
          enum:
            - service
            - website
            - library
          enumNames:
            - Service
            - Web
            - Library

        component_lifecycle:
          title: Component Lifecycle
          type: string
          description: Select this component's lifecycle. These are aligned to GDS project phases.
          default: alpha
          enum:
            - discovery
            - alpha
            - beta
            - live
            - retirement
          enumNames:
            - Discovery
            - Alpha
            - Beta
            - Live
            - Retirement

        owner:
          title: Owner
          type: string
          description: Select the team who will own this component
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              - kind: Group
                spec.type: team

    - title: Git Repository
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOrganizations:
              - defra-adp-sandpit
            requestUserCredentials:
              secretsKey: USER_OAUTH_TOKEN
              additionalScopes:
                github:
                  - workflow

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        values:
          component_id: ${{ parameters.component_id }}
          project_name: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}
          workstream: ${{ parameters.owner | parseEntityRef | pick('name') }}
          repo_url: ${{ parameters.repoUrl }}
          repo_project_slug: ${{ parameters.repoUrl | projectSlug }}
          component_type: ${{ parameters.component_type }}
          component_lifecycle: ${{ parameters.component_lifecycle }}
          system: ${{ parameters.system }}

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: ${{ parameters.description }}
        repoUrl: ${{ parameters.repoUrl }}
        token: ${{ secrets.USER_OAUTH_TOKEN }}
        requireCodeOwnerReviews: true
        dismissStaleReviews: true
        requiredConversationResolution: true
        requiredStatusCheckContexts: []
        repoVisibility: internal
        defaultBranch: main
        gitAuthorEmail: ${{ user.entity.spec.profile.email }}
        gitAuthorName: ${{ user.entity.metadata.name }}
        requiredCommitSigning: true

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
