apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: ffc-template-node
  title: "FFC Template Node"
  description: "Template to support rapid delivery of microservices for FFC Platform. It contains the configuration needed to deploy a simple Hapi Node server to the Azure Kubernetes Platform."
  tags:
    - node
    - hapi
    - aks
    - fcp
spec:
  owner: fcp
  type: service

  parameters:
    - title: Component Information
      description: Enter properties describing this component.
      required:
        - component_id
        - description
        - owner
        - component_type
        - component_lifecycle
      properties:
        component_id:
          title: Component Name
          type: string
          description: Unique name of the component which will be used for the repository, package, and image names. This should be in the format <program>-<workstream>-<repo>. Maximum 64 characters.
          ui:field: EntityNamePicker
          ui:autofocus: true

        description:
          title: Description
          type: string
          description: Describe what this component does

        system:
          title: System
          type: string
          description: Select the system that this component will be a part of
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            catalogFilter:
              - kind: System

        component_type:
          title: Component Type
          type: string
          description: Select the type of this component. Allowed values - Backend API (a backend service or API), Frontend UI (a web application)
          default: backend
          enum:
            - backend
            - frontend
          enumNames:
            - Backend API
            - Frontend UI

        component_lifecycle:
          title: Component Lifecycle
          type: string
          description: Select this component's lifecycle. These are aligned to GDS project phases.
          default: alpha
          enum:
            - discovery
            - alpha
            - beta
          enumNames:
            - Discovery
            - Alpha
            - Beta

        owner:
          title: Owner
          type: string
          description: Select the team who will own this component
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              - kind: Group
                spec.type: team

    - title: Git Repository
      description: To encourage coding in the open the repository will be public by default. Refer to the [GDS service manual](https://www.gov.uk/service-manual/technology/making-source-code-open-and-reusable) for more information.
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOrganizations:
              - defra-adp-sandpit
            requestUserCredentials:
              secretsKey: USER_OAUTH_TOKEN
              additionalScopes:
                github:
                  - workflow

    - title: CI/CD
      description: CI/CD pipelines will be created in Azure DevOps
      required:
        - adoOrganization
        - adoProject
        - serviceConnectionName
        - pipelineFolder
      properties:
        adoOrganization:
          title: Azure DevOps Organization
          type: string
          default: defragovuk
        adoProject:
          title: Azure DevOps Project
          type: string
          default: DEFRA-FFC
        serviceConnectionName:
          title: Service Connection Name
          type: string
          description: Name of the Service Connection used to connect to GitHub.
        pipelineFolder:
          title: Pipeline Folder
          type: string
          description: Folder path where the pipeline will be created
          default: /

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        values:
          component_id: ${{ parameters.component_id }}
          project_name: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}
          workstream: ${{ parameters.owner | parseEntityRef | pick('name') }}
          repo_url: ${{ parameters.repoUrl }}
          repo_project_slug: ${{ parameters.repoUrl | projectSlug }}
          component_type: ${{ parameters.component_type }}
          component_lifecycle: ${{ parameters.component_lifecycle }}
          system: ${{ parameters.system }}

    - id: publish
      name: Publish GitHub Repo
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: ${{ parameters.description }}
        repoUrl: ${{ parameters.repoUrl }}
        token: ${{ secrets.USER_OAUTH_TOKEN }}
        requireCodeOwnerReviews: true
        dismissStaleReviews: true
        requiredConversationResolution: true
        requiredStatusCheckContexts: []
        repoVisibility: public
        defaultBranch: main
        gitAuthorEmail: ${{ user.entity.spec.profile.email }}
        gitAuthorName: ${{ user.entity.metadata.name }}
        requiredCommitSigning: true

    - id: getServiceConnection
      name: Get ADO Service Connection
      action: defra:azure:serviceconnection:get
      input:
        organization: ${{ parameters.adoOrganization }}
        project: ${{ parameters.adoProject }}
        serviceConnectionName: ${{ parameters.serviceConnectionName }}
        #token: 

    - id: createPipeline
      name: Create CI Pipeline
      action: defra:azure:pipeline:create
      input:
        organization: ${{ parameters.adoOrganization }}
        project: ${{ parameters.adoProject }}
        folder: ADP/temp
        repositoryName: ${{ parameters.repoUrl | projectSlug }}
        yamlPath: .azuredevops/build.yaml
        repositoryLocation: gitHub
        serviceConnectionId: ${{ steps.getServiceConnection.output.serviceConnectionId }}
        name: ${{ parameters.repoUrl | parseRepoUrl | pick('owner') }}.${{ parameters.component_id }}
        #token: 

    - id: permitSnyk
      name: CI Pipeline - Permit Snyk
      action: azure:pipeline:permit
      input:
        organization: ${{ parameters.adoOrganization }}
        project: ${{ parameters.adoProject }}
        resourceType: endpoint
        resourceId: 663a60df-6aaa-4c2c-9fcd-ac4251732e87
        authorized: true
        pipelineId: ${{ steps.createPipeline.output.pipelineId }}
        #token: 

    - id: permitSSV3
      name: CI Pipeline - Permit SSV3 Service Connection
      action: azure:pipeline:permit
      input:
        organization: ${{ parameters.adoOrganization }}
        project: ${{ parameters.adoProject }}
        resourceType: endpoint
        resourceId: 8e5ae2d4-31c5-4031-9ca8-54cc7b4f22d9
        authorized: true
        pipelineId: ${{ steps.createPipeline.output.pipelineId }}
        #token: 

    - id: permitGithub
      name: CI Pipeline - Permit GitHub Service Connection
      action: azure:pipeline:permit
      input:
        organization: ${{ parameters.adoOrganization }}
        project: ${{ parameters.adoProject }}
        resourceType: endpoint
        resourceId: c7b55e44-8406-4bb3-bf47-c03c3bebe452
        authorized: true
        pipelineId: ${{ steps.createPipeline.output.pipelineId }}
        #token: 

    - id: permitSonarCloud
      name: CI Pipeline - Permit SonarCloud Service Connection
      action: azure:pipeline:permit
      input:
        organization: ${{ parameters.adoOrganization }}
        project: ${{ parameters.adoProject }}
        resourceType: endpoint
        resourceId: bbcf902e-d4d5-42ab-b175-f0f05954c528
        authorized: true
        pipelineId: ${{ steps.createPipeline.output.pipelineId }}
        #token: 

    - id: permitVariableGroup
      name: CI Pipeline - Permit Variable Group
      action: azure:pipeline:permit
      input:
        organization: ${{ parameters.adoOrganization }}
        project: ${{ parameters.adoProject }}
        resourceType: variablegroup
        resourceId: '449'
        authorized: true
        pipelineId: ${{ steps.createPipeline.output.pipelineId }}
        #token: 

    - id: permitAgentGroup
      name: CI Pipeline - Permit Agent Group
      action: azure:pipeline:permit
      input:
        organization: ${{ parameters.adoOrganization }}
        project: ${{ parameters.adoProject }}
        resourceType: queue
        resourceId: '3072'
        authorized: true
        pipelineId: ${{ steps.createPipeline.output.pipelineId }}
        #token: 

    - id: runPipeline
      name: Run CI Pipeline
      action: azure:pipeline:run
      input:
        organization: ${{ parameters.adoOrganization }}
        pipelineId: ${{ steps.createPipeline.output.pipelineId }}
        project: ${{ parameters.adoProject }}
        #token: 

    - id: register
      name: Register in Software Catalog
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
      - title: View CI Pipeline
        url: ${{ steps.createPipeline.output.pipelineUrl }}
